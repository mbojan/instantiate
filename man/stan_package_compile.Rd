% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stan_package_compile.R
\name{stan_package_compile}
\alias{stan_package_compile}
\title{Compile the Stan models in an R package.}
\usage{
stan_package_compile(
  path = file.path(getwd(), "inst", "stan"),
  cmdstan_install = Sys.getenv("CMDSTAN_INSTALL"),
  quiet = FALSE,
  verbose = TRUE,
  pedantic = FALSE,
  include_paths = NULL,
  cpp_options = list(),
  stanc_options = list()
)
}
\arguments{
\item{path}{Absolute path to the directory of Stan models. Must be
an absolute path. Defaults to \code{file.path(getwd(), "inst", "stan")}
because that is where Stan model files must be located if
building a package configured with \code{instantiate}.}

\item{cmdstan_install}{Character of length 1, how CmdStan was installed. The
installation method determines how \code{instantiate} looks up CmdStan.
Set the default value with the \code{CMDSTAN_INSTALL} environment variable.
Choices:
\enumerate{
\item \code{"internal"}: Use the copy of CmdStan installed internally inside the
\code{instantiate} package file system. Before using this option,
CmdStan must be installed in the package file system. To do this,
set the \code{CMDSTAN_INSTALL} environment variable to \code{"internal"} before
installing \code{instantiate}.
\item \code{"fixed"}: Use the copy of CmdStan that was located at the value
contained in \code{Sys.getenv("CMDSTAN")} at the time \code{instantiate}
was installed. In this case, the path to CmdStan is not inside
\code{instantiate} itself, but it is fixed at installation time
and does not depend on the current value of
\code{Sys.getenv("CMDSTAN")} at runtime.
\item \code{"cmdstanr"}: Let the \code{cmdstanr::cmdstan_path()} decide where
to look for CmdStan.
\item \code{""} (default): Try all 3 options in the order above to find a valid
installed copy of CmdStan.
}}

\item{quiet}{(logical) Should the verbose output from CmdStan during
compilation be suppressed? The default is \code{TRUE}, but if you encounter an
error we recommend trying again with \code{quiet=FALSE} to see more of the
output.}

\item{verbose}{Logical of length 1, whether to set the
\code{cmdstanr_verbose} global option to print more compiler messages
than usual.}

\item{pedantic}{(logical) Should pedantic mode be turned on? The default is
\code{FALSE}. Pedantic mode attempts to warn you about potential issues in your
Stan program beyond syntax errors. For details see the \href{https://mc-stan.org/docs/reference-manual/pedantic-mode.html}{\emph{Pedantic mode} chapter} in
the Stan Reference Manual. \strong{Note:} to do a pedantic check for a model
without compiling it or for a model that is already compiled the
\code{\link[cmdstanr:model-method-check_syntax]{$check_syntax()}} method can be used instead.}

\item{include_paths}{(character vector) Paths to directories where Stan
should look for files specified in \verb{#include} directives in the Stan
program.}

\item{cpp_options}{(list) Any makefile options to be used when compiling the
model (\code{STAN_THREADS}, \code{STAN_MPI}, \code{STAN_OPENCL}, etc.). Anything you would
otherwise write in the \code{make/local} file. For an example of using threading
see the Stan case study
\href{https://mc-stan.org/users/documentation/case-studies/reduce_sum_tutorial.html}{Reduce Sum: A Minimal Example}.}

\item{stanc_options}{(list) Any Stan-to-C++ transpiler options to be used
when compiling the model. See the \strong{Examples} section below as well as the
\code{stanc} chapter of the CmdStan Guide for more details on available options:
https://mc-stan.org/docs/cmdstan-guide/stanc.html.}
}
\value{
\code{NULL} (invisibly)
}
\description{
Compile all Stan models in a directory, usually in a package.
}
\details{
If building a package using \code{instantiate}, all Stan model files
must live in a folder called \verb{inst/stan/} in the package source
directory.
}
\examples{
if (identical(Sys.getenv("INSTANTIATE_EXAMPLES"), "true")) {
# Compilation happens automatically when the package installs.
path <- tempfile()
stan_package_create(path = path)
stan_package_configure(path = path)
temporary_library <- tempfile()
dir.create(temporary_library)
install.packages(
  pkgs = path,
  lib = temporary_library,
  type = "source",
  repos = NULL
)
# But if you want to manually compile a directory of Stan files,
# you can call stan_package_compile() directly like this:
stan_package_compile(path = file.path(path, "inst", "stan"))
}
}
\seealso{
Other packages: 
\code{\link{stan_cmdstan_path}()},
\code{\link{stan_package_configure}()}
}
\concept{packages}
